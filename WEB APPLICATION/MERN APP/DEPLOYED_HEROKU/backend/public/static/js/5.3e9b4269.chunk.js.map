{"version":3,"sources":["summary/pages/NewSummary.js"],"names":["NewSummary","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","book_description","value","isValid","summary_title","summary_body","image","formState","inputHandler","history","useHistory","summarySubmitHandler","event","a","preventDefault","formData","FormData","console","log","token","append","inputs","process","Authorization","push","Fragment","onClear","className","onSubmit","asOverlay","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","disabled"],"mappings":"qPA4GeA,UA3FI,WACjB,IAAMC,EAAOC,qBAAWC,KADD,EAE+BC,cAA9CC,EAFe,EAEfA,UAAWC,EAFI,EAEJA,MAAOC,EAFH,EAEGA,YAAaC,EAFhB,EAEgBA,WAFhB,EAGWC,YAChC,CACEC,iBAAkB,CAChBC,MAAO,GACPC,SAAS,GAEXC,cAAe,CACbF,MAAO,GACPC,SAAS,GAEXE,aAAc,CACZH,MAAO,GACPC,SAAS,GAEXG,MAAO,CACLJ,MAAO,KACPC,SAAS,KAIb,GAvBqB,mBAGhBI,EAHgB,KAGLC,EAHK,KA0BjBC,EAAUC,cAEVC,EAAoB,uCAAG,WAAMC,GAAN,eAAAC,EAAA,6DAC3BD,EAAME,iBADqB,SAGnBC,EAAW,IAAIC,SACrBC,QAAQC,IAAI1B,EAAK2B,OACjBJ,EAASK,OAAO,mBAAoBb,EAAUc,OAAOpB,iBAAiBC,OACtEa,EAASK,OAAO,gBAAiBb,EAAUc,OAAOjB,cAAcF,OAChEa,EAASK,OAAO,eAAgBb,EAAUc,OAAOhB,aAAaH,OAC9Da,EAASK,OAAO,QAASb,EAAUc,OAAOf,MAAMJ,OARvB,UASnBJ,EAAYwB,6CAAiD,OAAQP,EAAU,CACnFQ,cAAe,UAAY/B,EAAK2B,QAVT,QAazBV,EAAQe,KAAK,KAbY,kDAezBP,QAAQC,IAAI,iBAfa,0DAAH,sDAmB1B,OACE,kBAAC,IAAMO,SAAP,KACE,kBAAC,IAAD,CAAY5B,MAAOA,EAAO6B,QAAS3B,IACnC,0BAAM4B,UAAU,aAAaC,SAAUjB,GACpCf,GAAa,kBAAC,IAAD,CAAgBiC,WAAS,IACvC,kBAAC,IAAD,CACEC,GAAG,mBACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,mBACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS7B,IAEX,kBAAC,IAAD,CACEsB,GAAG,gBACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,gBACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS7B,IAGX,kBAAC,IAAD,CACEsB,GAAG,eACHC,QAAQ,WACRE,MAAM,eACNC,WAAY,CAACI,YAAoB,IACjCF,UAAU,oCACVC,QAAS7B,IAEX,kBAAC,IAAD,CACEsB,GAAG,QACHO,QAAS7B,IAEX,kBAAC,IAAD,CAAQwB,KAAK,SAASO,UAAWhC,EAAUJ,SAA3C,mB","file":"static/js/5.3e9b4269.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Summary.css';\n\nconst NewSummary = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [formState, inputHandler] = useForm(\n    {\n      book_description: {\n        value: '',\n        isValid: false\n      },\n      summary_title: {\n        value: '',\n        isValid: false\n      },\n      summary_body: {\n        value: '',\n        isValid: false\n      },\n      image: {\n        value: null,\n        isValid: true\n      }\n     \n    },\n    false\n  );\n\n  const history = useHistory();\n\n  const summarySubmitHandler = async event => {\n    event.preventDefault();\n    try {\n      const formData = new FormData();\n      console.log(auth.token);\n      formData.append('book_description', formState.inputs.book_description.value);\n      formData.append('summary_title', formState.inputs.summary_title.value);\n      formData.append('summary_body', formState.inputs.summary_body.value);\n      formData.append('image', formState.inputs.image.value);\n      await sendRequest(process.env.REACT_APP_BACKEND_URL+'api/summary', 'POST', formData, {\n        Authorization: 'Bearer ' + auth.token\n      });\n\n      history.push('/');\n    } catch (err) {\n      console.log(\"error occured\");\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={summarySubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input\n          id=\"book_description\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Book Description\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title.\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"summary_title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Summary Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title.\"\n          onInput={inputHandler}\n        />\n\n        <Input\n          id=\"summary_body\"\n          element=\"textarea\"\n          label=\"Summary Body\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description.\"\n          onInput={inputHandler}\n        />\n        <ImageUpload\n          id=\"image\"\n          onInput={inputHandler}\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD SUMMARY\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewSummary;\n"],"sourceRoot":""}