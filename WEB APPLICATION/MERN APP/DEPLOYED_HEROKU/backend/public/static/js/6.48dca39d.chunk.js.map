{"version":3,"sources":["summary/pages/UpdateSummary.js"],"names":["UpdateSummary","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","LoadedSummary","setLoadedSummary","summaryId","useParams","history","useHistory","useForm","title","value","isValid","description","body","formState","inputHandler","setFormData","useEffect","a","console","log","process","responseData","summarybyid","summary_title","book_description","summary_body","fetchPlace","summaryUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","userId","className","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","disabled"],"mappings":"oPAgKeA,UAhJO,WACpB,IAAMC,EAAOC,qBAAWC,KADE,EAE4BC,cAA9CC,EAFkB,EAElBA,UAAWC,EAFO,EAEPA,MAAOC,EAFA,EAEAA,YAAaC,EAFb,EAEaA,WAFb,EAGgBC,qBAHhB,mBAGnBC,EAHmB,KAGJC,EAHI,KAIpBC,EAAYC,cAAYD,UACxBE,EAAUC,cALU,EAOqBC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,GAEXE,KAAM,CACJH,MAAO,GACPC,SAAS,KAGb,GAtBwB,mBAOnBG,EAPmB,KAORC,EAPQ,KAOMC,EAPN,KAyB1BC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEAEfC,QAAQC,IAAI,mBACZD,QAAQC,IAAIhB,GAHG,SAIYL,EACzBsB,kCAAA,sBAAiDjB,IALpC,OAITkB,EAJS,OAOfnB,EAAiBmB,EAAaC,aAC9BJ,QAAQC,IAAIE,EAAaC,aACzBP,EACE,CACEP,MAAO,CACLC,MAAOY,EAAaC,YAAYC,cAChCb,SAAS,GAEXC,YAAa,CACXF,MAAOY,EAAaC,YAAYE,iBAChCd,SAAS,GAEXE,KAAK,CACHH,MAAOY,EAAaC,YAAYG,aAChCf,SAAS,KAIb,GAzBa,4GAAH,qDA6BhBgB,KACC,CAAC5B,EAAaK,EAAWY,IAE5B,IAAMY,EAA0B,uCAAG,WAAMC,GAAN,SAAAX,EAAA,6DACjCW,EAAMC,iBAD2B,kBAGzB/B,EACJsB,kCAAA,sBAAiDjB,GACjD,QACA2B,KAAKC,UAAU,CACbvB,MAAOK,EAAUmB,OAAOxB,MAAMC,MAC9BE,YAAaE,EAAUmB,OAAOrB,YAAYF,MAC1CG,KAAMC,EAAUmB,OAAOpB,KAAKH,QAG9B,CACE,eAAgB,mBAChBwB,cAAe,UAAYzC,EAAK0C,QAdL,OAiB/B7B,EAAQ8B,KAAK,IAAM3C,EAAK4C,OAAS,cAjBF,gDAmB/BlB,QAAQC,IAAI,cAnBmB,yDAAH,sDAuBhC,OAAIvB,EAEA,yBAAKyC,UAAU,UACb,kBAAC,IAAD,OAKDpC,GAAkBJ,EAWrB,kBAAC,IAAMyC,SAAP,KACE,kBAAC,IAAD,CAAYzC,MAAOA,EAAO0C,QAASxC,KACjCH,GAAaK,GACb,0BAAMoC,UAAU,aAAaG,SAAUb,GACrC,kBAAC,IAAD,CACEc,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAASlC,EACTmC,aAAchD,EAAcsB,cAC5B2B,cAAc,IAEhB,kBAAC,IAAD,CACET,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAASlC,EACTmC,aAAchD,EAAcuB,iBAC5B0B,cAAc,IAEf,kBAAC,IAAD,CACCT,GAAG,OACHC,QAAQ,WACRE,MAAM,OACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAASlC,EACTmC,aAAchD,EAAcwB,aAC5ByB,cAAc,IAEhB,kBAAC,IAAD,CAAQP,KAAK,SAASQ,UAAWtC,EAAUH,SAA3C,oBA5CJ,yBAAK2B,UAAU,UACb,kBAAC,IAAD,KACE,8D","file":"static/js/6.48dca39d.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport {\n  VALIDATOR_REQUIRE,\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Summary.css';\n\nconst UpdateSummary = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [LoadedSummary, setLoadedSummary] = useState();\n  const summaryId = useParams().summaryId;\n  const history = useHistory();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '',\n        isValid: false\n      },\n      body: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        console.log(\"sdsand,msadnas,\");\n        console.log(summaryId);\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL+`api/summary/${summaryId}`\n        );\n        setLoadedSummary(responseData.summarybyid);\n        console.log(responseData.summarybyid);\n        setFormData(\n          {\n            title: {\n              value: responseData.summarybyid.summary_title,\n              isValid: true\n            },\n            description: {\n              value: responseData.summarybyid.book_description,\n              isValid: true\n            },\n            body:{\n              value: responseData.summarybyid.summary_body,\n              isValid: true\n              \n            }\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, summaryId, setFormData]);\n\n  const summaryUpdateSubmitHandler = async event => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        process.env.REACT_APP_BACKEND_URL+`api/summary/${summaryId}`,\n        'PATCH',\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n          body: formState.inputs.body.value,\n          \n        }),\n        {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + auth.token\n        }\n      );\n      history.push('/' + auth.userId + '/summaries');\n    } catch (err) {\n      console.log(\"error aayo\");\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!LoadedSummary && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place haha!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && LoadedSummary && (\n        <form className=\"place-form\" onSubmit={summaryUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={LoadedSummary.summary_title}\n            initialValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter  description .\"\n            onInput={inputHandler}\n            initialValue={LoadedSummary.book_description}\n            initialValid={true}\n          />\n           <Input\n            id=\"body\"\n            element=\"textarea\"\n            label=\"Body\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter  description .\"\n            onInput={inputHandler}\n            initialValue={LoadedSummary.summary_body}\n            initialValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE SUMMARY\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdateSummary;\n"],"sourceRoot":""}